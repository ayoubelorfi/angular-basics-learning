{
  "manifest": {
    "name": "@npmcli/promise-spawn",
    "version": "1.3.2",
    "files": [
      "index.js"
    ],
    "description": "spawn processes the way the npm cli likes to do",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/npm/promise-spawn"
    },
    "author": {
      "name": "Isaac Z. Schlueter",
      "email": "i@izs.me",
      "url": "https://izs.me"
    },
    "license": "ISC",
    "scripts": {
      "test": "tap",
      "snap": "tap",
      "preversion": "npm test",
      "postversion": "npm publish",
      "prepublishOnly": "git push origin --follow-tags"
    },
    "tap": {
      "check-coverage": true
    },
    "devDependencies": {
      "minipass": "^3.1.1",
      "require-inject": "^1.4.4",
      "tap": "^14.10.6"
    },
    "dependencies": {
      "infer-owner": "^1.0.4"
    },
    "_registry": "npm",
    "_loc": "/usr/src/app/.cache/yarn/v6/npm-@npmcli-promise-spawn-1.3.2-42d4e56a8e9274fba180dabc0aea6e38f29274f5-integrity/node_modules/@npmcli/promise-spawn/package.json",
    "readmeFilename": "README.md",
    "readme": "# @npmcli/promise-spawn\n\nSpawn processes the way the npm cli likes to do.  Give it some options,\nit'll give you a Promise that resolves or rejects based on the results of\nthe execution.\n\nNote: When the current user is root, this will use\n[`infer-owner`](http://npm.im/infer-owner) to find the owner of the current\nworking directory, and run with that effective uid/gid.  Otherwise, it runs\nas the current user always.  (This helps prevent doing git checkouts and\nsuch, and leaving root-owned files lying around in user-owned locations.)\n\n## USAGE\n\n```js\nconst promiseSpawn = require('@npmcli/promise-spawn')\n\npromiseSpawn('ls', [ '-laF', 'some/dir/*.js' ], {\n  cwd: '/tmp/some/path', // defaults to process.cwd()\n  stdioString: false, // stdout/stderr as strings rather than buffers\n  stdio: 'pipe', // any node spawn stdio arg is valid here\n  // any other arguments to node child_process.spawn can go here as well,\n  // but uid/gid will be ignored and set by infer-owner if relevant.\n}, {\n  extra: 'things',\n  to: 'decorate',\n  the: 'result',\n}).then(result => {\n  // {code === 0, signal === null, stdout, stderr, and all the extras}\n  console.log('ok!', result)\n}).catch(er => {\n  // er has all the same properties as the result, set appropriately\n  console.error('failed!', er)\n})\n```\n\n## API\n\n### `promiseSpawn(cmd, args, opts, extra)` -> `Promise`\n\nRun the command, return a Promise that resolves/rejects based on the\nprocess result.\n\nResult or error will be decorated with the properties in the `extra`\nobject.  You can use this to attach some helpful info about _why_ the\ncommand is being run, if it makes sense for your use case.\n\nIf `stdio` is set to anything other than `'inherit'`, then the result/error\nwill be decorated with `stdout` and `stderr` values.  If `stdioString` is\nset to `true`, these will be strings.  Otherwise they will be Buffer\nobjects.\n\nReturned promise is decorated with the `stdin` stream if the process is set\nto pipe from `stdin`.  Writing to this stream writes to the `stdin` of the\nspawned process.\n\n#### Options\n\n- `stdioString` Boolean, default `false`.  Return stdout/stderr output as\n  strings rather than buffers.\n- `cwd` String, default `process.cwd()`.  Current working directory for\n  running the script.  Also the argument to `infer-owner` to determine\n  effective uid/gid when run as root on Unix systems.\n- Any other options for `child_process.spawn` can be passed as well, but\n  note that `uid` and `gid` will be overridden by the owner of the cwd when\n  run as root on Unix systems, or `null` otherwise.\n",
    "licenseText": "The ISC License\n\nCopyright (c) npm, Inc.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE NPM DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS. IN NO EVENT SHALL THE NPM BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT,\nOR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,\nDATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS\nACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@npmcli/promise-spawn/-/promise-spawn-1.3.2.tgz#42d4e56a8e9274fba180dabc0aea6e38f29274f5",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@npmcli/promise-spawn/-/promise-spawn-1.3.2.tgz",
    "hash": "42d4e56a8e9274fba180dabc0aea6e38f29274f5",
    "integrity": "sha512-QyAGYo/Fbj4MXeGdJcFzZ+FkDkomfRBrPM+9QYJSg+PxgAUL+LU3FneQk37rKR2/zjqkCV1BLHccX98wRXG3Sg==",
    "registry": "npm",
    "packageName": "@npmcli/promise-spawn",
    "cacheIntegrity": "sha512-QyAGYo/Fbj4MXeGdJcFzZ+FkDkomfRBrPM+9QYJSg+PxgAUL+LU3FneQk37rKR2/zjqkCV1BLHccX98wRXG3Sg== sha1-QtTlao6SdPuhgNq8CupuOPKSdPU="
  },
  "registry": "npm",
  "hash": "42d4e56a8e9274fba180dabc0aea6e38f29274f5"
}